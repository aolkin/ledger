generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Auth.js Tables

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  ledgers       LedgerAccess[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Ledger Tables

model LedgerMeta {
  id        String           @id @unique
  name      String
  startDate DateTime
  endDate   DateTime
  created   DateTime         @default(now())
  updated   DateTime         @updatedAt
  templates LedgerTemplate[]
  entries   LedgerEntry[]
  updates   UpdateLog[]
  access    LedgerAccess[]
}

model LedgerTemplate {
  ledgerId String
  ledger   LedgerMeta  @relation(fields: [ledgerId], references: [id])
  id       String      @id
  title    String
  value    Float
  unit     String
  group    String
  color    String?
  notes    String?
  created  DateTime    @default(now())
  updated  DateTime    @updatedAt
  updates  UpdateLog[]

  @@index([ledgerId])
  @@unique([ledgerId, id])
}

model LedgerEntry {
  ledgerId   String
  ledger     LedgerMeta  @relation(fields: [ledgerId], references: [id])
  id         String      @id
  title      String
  value      Float
  unit       String
  group      String
  color      String?
  notes      String?
  multiplier Float
  timestamp  DateTime    @default(now())
  created    DateTime    @default(now())
  updated    DateTime    @updatedAt
  author     String
  updates    UpdateLog[]

  @@index([ledgerId])
  @@unique([ledgerId, id])
}

model LedgerAccess {
  id       String     @id @default(uuid())
  ledgerId String
  ledger   LedgerMeta @relation(fields: [ledgerId], references: [id])
  userId   String
  user     User       @relation(fields: [userId], references: [id])
  level    String

  @@unique([ledgerId, userId])
}

model UpdateLog {
  ledgerId         String
  ledger           LedgerMeta      @relation(fields: [ledgerId], references: [id])
  id               String          @id @default(uuid())
  action           String
  timestamp        DateTime        @default(now())
  ledgerTemplateId String?
  ledgerTemplate   LedgerTemplate? @relation(fields: [ledgerTemplateId], references: [id])
  ledgerEntryId    String?
  ledgerEntry      LedgerEntry?    @relation(fields: [ledgerEntryId], references: [id])

  @@index([ledgerId, timestamp])
}
